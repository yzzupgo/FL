        -:    0:Source:/home/cyxy/files/access/cdata/version/v221/test_data/defect_root/source/tcas.c
        -:    0:Graph:/home/cyxy/files/access/cdata/version/v221/test_data/defect_root/source/tcas.gcno
        -:    0:Data:/home/cyxy/files/access/cdata/version/v221/test_data/defect_root/source/tcas.gcda
        -:    0:Runs:6
        -:    1:#include <stdio.h>
        -:    2:#include <string.h>
        -:    3:
        -:    4:const int   arabar[]  = {  1,   4,    5,   9,    10,  40,  50,   90,  100, 400,  500, 900,  1000};
        -:    5:const char *romanar[] = { "I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M"};
        -:    6: 
    #####:    7:char *arab2roman(long long arab) {
        -:    8:        static char roman[100];
    #####:    9:        const int m = sizeof(arabar)/sizeof(int)-1, arabmax=arabar[m];
    #####:   10:        const char romanmax=romanar[m][0];
        -:   11:        int i, n;
    #####:   12:        if(!arab) {
    #####:   13:                *roman=0;
    #####:   14:                return roman;
        -:   15:        }
    #####:   16:        i=0;
    #####:   17:        while(arab>arabmax) {
    #####:   18:                roman[i++] = romanmax;
    #####:   19:                arab      -= arabmax;
        -:   20:        }
    #####:   21:        n=m;
    #####:   22:        while(arab > 0) {
    #####:   23:                if(arab >= arabar[n]) {
    #####:   24:                        roman[i++] = romanar[n][0];
    #####:   25:                        if(n&1)
    #####:   26:                                roman[i++] = romanar[n][1];
    #####:   27:                        arab -= arabar[n];
        -:   28:                } else
    #####:   29:                        n--;
        -:   30:        }
    #####:   31:        roman[i]=0;
    #####:   32:        return roman;
        -:   33:}
        -:   34: 
        -:   35:
        6:   36:int main(int argc, char *argv[]) {
        6:   37:	int a; scanf("%d", &a);
        -:   38:
        6:   39:	char s[3]; scanf("%s", s);
        -:   40:
        6:   41:	char cs[1001]; scanf("%s", cs);
        6:   42:	int i, n = strlen(cs);
        6:   43:	long long c = 0;
       88:   44:	for (i = 0; i < n; i++) {
       82:   45:		c = c * a;
       82:   46:		if ('0' <= cs[i] && cs[i] <= '9')
       82:   47:			c += cs[i] - '0';
        -:   48:		else
    #####:   49:			c += cs[i] - 'A' + 10;
        -:   50:	}
        -:   51:
        6:   52:	if (s[0] != 'R') {
        6:   53:		int b; sscanf(s, "%d", &b);
        -:   54:
        6:   55:		int dn = 0, d[100];
        6:   56:		if (c == 0)
        6:   57:			d[dn++] = 0;
        6:   58:		while (c != 0) {
    #####:   59:			d[dn++] = c % b;
    #####:   60:			c /= b;
        -:   61:		}
        -:   62:
       12:   63:		for (i = dn-1; i >= 0; i--)
        6:   64:			if (d[i] < 10)
        6:   65:				putchar(d[i] + '0');
        -:   66:			else
    #####:   67:				putchar(d[i] - 10 + 'A');
        -:   68:	} else {
    #####:   69:		puts(arab2roman(c));
        -:   70:	}
        -:   71:
        6:   72:	return 0;
        -:   73:}
        -:   74:
